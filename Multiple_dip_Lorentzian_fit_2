import pandas as pd
import numpy as np
import matplotlib.pyplot as pl
from scipy.optimize import leastsq
from scipy.signal import argrelmin 
import sys
#from numpy import NaN, Inf, arange, isscalar, asarray, array

Data = pd.read_csv ('/home/dwi/ownCloud/Anlabshared/Dwi/Data and Analysis/160627/2016_06_27_MagPar_pos5.csv')
Data.columns = ['Microwave frequency', 'Intensity']
x = np.array(Data['Microwave frequency'])
y = np.array(Data['Intensity']/Data['Intensity'].max())


dipind = argrelmin(y, order=10, mode='clip')
ind = np.array(dipind[0])

xdip = x[dipind]
ydip = y[dipind]


p = [4*10**6, 4*10**6, 4*10**6, 4*10**6, 4*10**6, 4*10**6, 4*10**6, 4*10**6, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 7*10**(-4), 0.001, 10, 100, 100, 0.001, 1, 5, 0]  # [HWHM1-8, dip 1-8, B0, Theta 1-8, Phi 1-8]
#p = [4*10**6, 4*10**6, 4*10**6, 4*10**6, 4*10**6, 4*10**6, 4*10**6, 4*10**6, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 7*10**(-4), 0, 10, 100, 100, 0, 1, 5, 0]  # [optimal parameters]


def Lorentzian(x, p):
    num = p[0]**2
    num2 = p[1]**2
    num3= p[2]**2
    num4 = p[3]**2
    num5 = p[4]**2
    num6 = p[5]**2
    num7 = p[6]**2
    num8 = p[7]**2
    denum = ( x - (2.87*10**9 - (28*10**9 * abs(p[16]) * np.sqrt((np.sin (p[17]) * np.cos(p[21]))**2 + (np.sin(p[17]) * np.sin(p[21]))**2 + (np.cos(p[21]))**2))))**2 + p[0]**2
    denum2 = ( x - (2.87*10**9 - (28*10**9 * abs(p[16]) * np.sqrt((np.sin (p[18]) * np.cos(p[22]))**2 + (np.sin(p[18]) * np.sin(p[22]))**2 + (np.cos(p[22]))**2))))**2 + p[1]**2
    denum3 = ( x - (2.87*10**9 - (28*10**9 * abs(p[16]) * np.sqrt((np.sin (p[19]) * np.cos(p[23]))**2 + (np.sin(p[19]) * np.sin(p[23]))**2 + (np.cos(p[23]))**2))))**2 + p[2]**2
    denum4 = ( x - (2.87*10**9 - (28*10**9 * abs(p[16]) * np.sqrt((np.sin (p[20]) * np.cos(p[24]))**2 + (np.sin(p[20]) * np.sin(p[24]))**2 + (np.cos(p[24]))**2))))**2 + p[3]**2
    denum5 = ( x - (2.87*10**9 + (28*10**9 * abs(p[16]) * np.sqrt((np.sin (p[20]) * np.cos(p[24]))**2 + (np.sin(p[20]) * np.sin(p[24]))**2 + (np.cos(p[24]))**2))))**2 + p[4]**2
    denum6 = ( x - (2.87*10**9 + (28*10**9 * abs(p[16]) * np.sqrt((np.sin (p[19]) * np.cos(p[23]))**2 + (np.sin(p[19]) * np.sin(p[23]))**2 + (np.cos(p[23]))**2))))**2 + p[5]**2
    denum7 = ( x - (2.87*10**9 + (28*10**9 * abs(p[16]) * np.sqrt((np.sin (p[18]) * np.cos(p[22]))**2 + (np.sin(p[18]) * np.sin(p[22]))**2 + (np.cos(p[22]))**2))))**2 + p[6]**2
    denum8 = ( x - (2.87*10**9 + (28*10**9 * abs(p[16]) * np.sqrt((np.sin (p[17]) * np.cos(p[21]))**2 + (np.sin(p[17]) * np.sin(p[21]))**2 + (np.cos(p[21]))**2))))**2 + p[7]**2
    Lor = p[8]*(num/denum)
    Lor2 = p[9]*(num2/denum2)
    Lor3 = p[10]*(num3/denum3)
    Lor4 = p[11]*(num4/denum4)
    Lor5 = p[12]*(num5/denum5)
    Lor6 = p[13]*(num6/denum6)
    Lor7 = p[14]*(num7/denum7)
    Lor8 = p[15]*(num8/denum8)
    return 1 - (Lor + Lor2 + Lor3 + Lor4 + Lor5 + Lor6 + Lor7 + Lor8)

def residuals(p, y, x):
    err = y - Lorentzian(x, p)
    return err


pbest = leastsq(residuals, p ,args=(y,x),full_output=1)
best_parameters1 = pbest[0]

fit = Lorentzian(x,best_parameters1)

################# INDIVIDUAL ESR SPECTRA#####################################################
num = best_parameters1[0]**2
num2 = best_parameters1[1]**2
num3 = best_parameters1[2]**2
num4 = best_parameters1[3]**2
num5 = best_parameters1[4]**2
num6 = best_parameters1[5]**2
num7 = best_parameters1[6]**2
num8 = best_parameters1[7]**2
denum = ( x - (2.87*10**9 - (28*10**9 * best_parameters1[16] * np.sqrt((np.sin (best_parameters1[17]) * np.cos(best_parameters1[21]))**2 + (np.sin(best_parameters1[17]) * np.sin(best_parameters1[21]))**2 + (np.cos(best_parameters1[21]))**2))))**2 + best_parameters1[0]**2
denum2 = ( x - (2.87*10**9 - (28*10**9 * best_parameters1[16] * np.sqrt((np.sin (best_parameters1[18]) * np.cos(best_parameters1[22]))**2 + (np.sin(best_parameters1[18]) * np.sin(best_parameters1[22]))**2 + (np.cos(best_parameters1[22]))**2))))**2 + best_parameters1[1]**2
denum3 = ( x - (2.87*10**9 - (28*10**9 * best_parameters1[16] * np.sqrt((np.sin (best_parameters1[19]) * np.cos(best_parameters1[23]))**2 + (np.sin(best_parameters1[19]) * np.sin(best_parameters1[23]))**2 + (np.cos(best_parameters1[23]))**2))))**2 + best_parameters1[2]**2
denum4 = ( x - (2.87*10**9 - (28*10**9 * best_parameters1[16] * np.sqrt((np.sin (best_parameters1[20]) * np.cos(best_parameters1[24]))**2 + (np.sin(best_parameters1[20]) * np.sin(best_parameters1[24]))**2 + (np.cos(best_parameters1[24]))**2))))**2 + best_parameters1[3]**2
denum5 = ( x - (2.87*10**9 + (28*10**9 * best_parameters1[16] * np.sqrt((np.sin (best_parameters1[20]) * np.cos(best_parameters1[24]))**2 + (np.sin(best_parameters1[20]) * np.sin(best_parameters1[24]))**2 + (np.cos(best_parameters1[24]))**2))))**2 + best_parameters1[4]**2
denum6 = ( x - (2.87*10**9 + (28*10**9 * best_parameters1[16] * np.sqrt((np.sin (best_parameters1[19]) * np.cos(best_parameters1[23]))**2 + (np.sin(best_parameters1[19]) * np.sin(best_parameters1[23]))**2 + (np.cos(best_parameters1[23]))**2))))**2 + best_parameters1[5]**2
denum7 = ( x - (2.87*10**9 + (28*10**9 * best_parameters1[16] * np.sqrt((np.sin (best_parameters1[18]) * np.cos(best_parameters1[22]))**2 + (np.sin(best_parameters1[18]) * np.sin(best_parameters1[22]))**2 + (np.cos(best_parameters1[22]))**2))))**2 + best_parameters1[6]**2
denum8 = ( x - (2.87*10**9 + (28*10**9 * best_parameters1[16] * np.sqrt((np.sin (best_parameters1[17]) * np.cos(best_parameters1[21]))**2 + (np.sin(best_parameters1[17]) * np.sin(best_parameters1[21]))**2 + (np.cos(best_parameters1[21]))**2))))**2 + best_parameters1[7]**2
Lor = 1-(best_parameters1[8]*(num/denum))
Lor2 = 1-(best_parameters1[9]*(num2/denum2))
Lor3 = 1-(best_parameters1[10]*(num3/denum3))
Lor4 = 1-(best_parameters1[11]*(num4/denum4))
Lor5 = 1-(best_parameters1[12]*(num5/denum5))
Lor6 = 1-(best_parameters1[13]*(num6/denum6))
Lor7 = 1-(best_parameters1[14]*(num7/denum7))
Lor8 = 1-(best_parameters1[15]*(num8/denum8))

#Lorentzian = 1 - (Lor + Lor2 + Lor3 + Lor4 + Lor5 + Lor6 + Lor7 + Lor8)
###############################################################################
pl.rc('text', usetex=True)
pl.rc('font', family='serif')
pl.plot (x, y, lw = 1.5, label = 'Experiment')
#pl.plot (x[dipind],y[dipind], 'ro')
pl.plot(x, fit, lw=1.5, color = 'r', label = r"Least-square fit") 
#pl.plot(fit2, ydip)
#pl.plot (x, Lor, x, Lor8, color = 'g')
#pl.plot (x, Lor2, x, Lor8, color = 'y')
#pl.plot (x, Lor3,color = 'c')
#pl.plot (x, Lor4, x, Lor5, color = 'm')
pl.xlabel('Microwave frequency (GHz)', fontsize = 18)
pl.ylabel('Intensity (norm.)', fontsize = 18)

pl.legend(loc = 4)
pl.show()
#print dipind
#print ind[1]
#print x[ind[1]]
#print p[1]
#print Lor
print "NV1:"
print "B0 =" + str(best_parameters1[16])+"T"
print "Theta1 =" + str(best_parameters1[17])
print "Phi1 =" + str(best_parameters1[21])
print "NV2:"
print "B0 =" + str(best_parameters1[16])+"T"
print "Theta2 =" + str(best_parameters1[18])
print "Phi2 =" + str(best_parameters1[22])
print "NV3:"
print "B0 =" + str(best_parameters1[16])+"T"
print "Theta3 =" + str(best_parameters1[19])
print "Phi3 =" + str(best_parameters1[23])
print "NV4:"
print "B0 =" + str(best_parameters1[16])+"T"
print "Theta4 =" + str(best_parameters1[10])
print "Phi4 =" + str(best_parameters1[24])