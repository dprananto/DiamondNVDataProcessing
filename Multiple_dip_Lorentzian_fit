import pandas as pd
import numpy as np
import matplotlib.pyplot as pl
from scipy.optimize import leastsq
from scipy.signal import argrelmin 
import sys
#from numpy import NaN, Inf, arange, isscalar, asarray, array

Data = pd.read_csv ('/home/dwi/ownCloud/Anlabshared/Dwi/Data and Analysis/160627/2016_06_27_MagPar_pos7.csv')
Data.columns = ['Microwave frequency', 'Intensity']
x = np.array(Data['Microwave frequency'])
y = np.array(Data['Intensity']/Data['Intensity'].max())


dipind = argrelmin(y, order=10, mode='clip')
ind = np.array(dipind[0])

xdip = x[dipind]
ydip = y[dipind]

p = [4*10**6, 4*10**6, 4*10**6, 4*10**6, 4*10**6, 4*10**6, 4*10**6, 4*10**6, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 2.83*10**9, 2.841*10**9, 2.86*10**9, 2.87*10**9, 2.87*10**9, 2.88*10**9, 2.90*10**9, 2.91*10**9]  # [HWHM, dip 1-8, center freqs]
z = [1*10**(-4), 10, 5] #B0, Theta, Phi

def zeeman(z):
    f = 2.87*10**9 + (28*10**9 * z[0] * np.sqrt((np.sin (z[1]) * np.cos(z[2]))**2 + (np.sin(z[1]) * np.sin(z[2]))**2 + (np.cos(z[2]))**2))
    return f

def Lorentzian(x, p):
    num = p[0]**2
    num2 = p[1]**2
    num3= p[2]**2
    num4 = p[3]**2
    num5 = p[4]**2
    num6 = p[5]**2
    num7 = p[6]**2
    num8 = p[7]**2
    denum = ( x - p[16])**2 + p[0]**2
    denum2 = ( x - p[17])**2 + p[1]**2
    denum3 = ( x - p[18])**2 + p[2]**2
    denum4 = ( x - p[19])**2 + p[3]**2
    denum5 = ( x - p[20])**2 + p[4]**2
    denum6 = ( x - p[21])**2 + p[5]**2
    denum7 = ( x - p[22])**2 + p[6]**2
    denum8 = ( x - p[23])**2 + p[7]**2
    Lor = p[8]*(num/denum)
    Lor2 = p[9]*(num2/denum2)
    Lor3 = p[10]*(num3/denum3)
    Lor4 = p[11]*(num4/denum4)
    Lor5 = p[12]*(num5/denum5)
    Lor6 = p[13]*(num6/denum6)
    Lor7 = p[14]*(num7/denum7)
    Lor8 = p[15]*(num8/denum8)
    return 1 - (Lor + Lor2 + Lor3 + Lor4 + Lor5 + Lor6 + Lor7 + Lor8)

def residuals(p,y,x):
    err = y - Lorentzian(x,p)
    return err

def reszeeman(z, xdip):
    err = xdip - zeeman(z)
    return err

pbest = leastsq(residuals, p ,args=(y,x),full_output=1)
best_parameters1 = pbest[0]

pbest2 = leastsq(reszeeman, z, args=(xdip), full_output=1)
best_parameters2 = pbest2[0] 

fit = Lorentzian(x,best_parameters1)
fit2 = zeeman(z)
#################ESR SPECTRA#####################################################
num = best_parameters1[0]**2
num2 = best_parameters1[1]**2
num3 = best_parameters1[2]**2
num4 = best_parameters1[3]**2
num5 = best_parameters1[4]**2
num6 = best_parameters1[5]**2
num7 = best_parameters1[6]**2
num8 = best_parameters1[7]**2
denum = ( x - best_parameters1[16])**2 + best_parameters1[0]**2
denum2 = ( x - best_parameters1[17])**2 + best_parameters1[1]**2
denum3 = ( x - best_parameters1[18])**2 + best_parameters1[2]**2
denum4 = ( x - best_parameters1[19])**2 + best_parameters1[3]**2
denum5 = ( x - best_parameters1[20])**2 + best_parameters1[4]**2
denum6 = ( x - best_parameters1[21])**2 + best_parameters1[5]**2
denum7 = ( x - best_parameters1[22])**2 + best_parameters1[6]**2
denum8 = ( x - best_parameters1[23])**2 + best_parameters1[7]**2
Lor = 1-(best_parameters1[8]*(num/denum))
Lor2 = 1-(best_parameters1[9]*(num2/denum2))
Lor3 = 1-(best_parameters1[10]*(num3/denum3))
Lor4 = 1-(best_parameters1[11]*(num4/denum4))
Lor5 = 1-(best_parameters1[12]*(num5/denum5))
Lor6 = 1-(best_parameters1[13]*(num6/denum6))
Lor7 = 1-(best_parameters1[14]*(num7/denum7))
Lor8 = 1-(best_parameters1[15]*(num8/denum8))

#Lorentzian = 1 - (Lor + Lor2 + Lor3 + Lor4 + Lor5 + Lor6 + Lor7 + Lor8)
###############################################################################
pl.rc('text', usetex=True)
pl.rc('font', family='serif')
pl.plot (x, y, lw = 1.5, label = 'Experiment')
pl.plot (x[dipind],y[dipind], 'ro')
pl.plot(x, fit, lw=1.5, color = 'r', label = r"Least-square fit") 
#pl.plot(fit2, ydip)
#pl.plot (x, Lor, x, Lor8, color = 'g')
#pl.plot (x, Lor2, x, Lor8, color = 'y')
pl.plot (x, Lor7,color = 'c')
#pl.plot (x, Lor4, x, Lor5, color = 'm')
pl.xlabel('Microwave frequency (GHz)', fontsize = 18)
pl.ylabel('Intensity (norm.)', fontsize = 18)

pl.legend(loc = 4)
pl.show()
#print dipind
#print ind[1]
#print x[ind[1]]
#print p[1]
#print Lor
#print best_parameters1[1]